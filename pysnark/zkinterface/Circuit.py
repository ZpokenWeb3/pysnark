# automatically generated by the FlatBuffers compiler, do not modify

# namespace: zkinterface

import flatbuffers

# /// A description of a circuit or sub-circuit.
# /// This can be a complete circuit ready for proving,
# /// or a part of a circuit being built.
class Circuit(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCircuit(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Circuit()
        x.Init(buf, n + offset)
        return x

    # Circuit
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// Variables to use as connections to the sub-circuit.
# ///
# /// - Variables to use as input connections to the gadget.
# /// - Or variables to use as output connections from the gadget.
# /// - Variables are allocated by the sender of this message.
# /// - The same structure must be provided for R1CS and witness generations.
# /// - If `witness_generation=true`, variables must be assigned values.
    # Circuit
    def Connections(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Variables import Variables
            obj = Variables()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// A variable ID greater than all IDs allocated by the sender of this message.
# /// The recipient of this message can allocate new IDs >= free_variable_id.
    # Circuit
    def FreeVariableId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

# /// Whether a constraint system is being generated.
# /// Provide constraints in R1CSConstraints messages.
    # Circuit
    def R1csGeneration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

# /// Whether a witness is being generated.
# /// Provide the witness in `connections.values` and Witness messages.
    # Circuit
    def WitnessGeneration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

# /// The largest element of the finite field used by the current system.
# /// A canonical little-endian representation of the field order minus one.
# /// See `Variables.values` below.
    # Circuit
    def FieldMaximum(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Circuit
    def FieldMaximumAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Circuit
    def FieldMaximumLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// Optional: Any custom parameter that may influence the circuit construction.
# ///
# /// Example: function_name, if a gadget supports multiple function variants.
# /// Example: the depth of a Merkle tree.
# /// Counter-example: a Merkle path is not config and belongs in `connections.info`.
    # Circuit
    def Configuration(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KeyValue import KeyValue
            obj = KeyValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Circuit
    def ConfigurationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def CircuitStart(builder): builder.StartObject(6)
def CircuitAddConnections(builder, connections): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(connections), 0)
def CircuitAddFreeVariableId(builder, freeVariableId): builder.PrependUint64Slot(1, freeVariableId, 0)
def CircuitAddR1csGeneration(builder, r1csGeneration): builder.PrependBoolSlot(2, r1csGeneration, 0)
def CircuitAddWitnessGeneration(builder, witnessGeneration): builder.PrependBoolSlot(3, witnessGeneration, 0)
def CircuitAddFieldMaximum(builder, fieldMaximum): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(fieldMaximum), 0)
def CircuitStartFieldMaximumVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def CircuitAddConfiguration(builder, configuration): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(configuration), 0)
def CircuitStartConfigurationVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CircuitEnd(builder): return builder.EndObject()
