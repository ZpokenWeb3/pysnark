# automatically generated by the FlatBuffers compiler, do not modify

# namespace: zkinterface

import flatbuffers

# /// Witness represents an assignment of values to variables.
# ///
# /// - Does not include variables already given in `Circuit.connections`.
# /// - Does not include the constant one variable.
# /// - Multiple such messages are equivalent to the concatenation of `Variables` arrays.
class Witness(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWitness(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Witness()
        x.Init(buf, n + offset)
        return x

    # Witness
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Witness
    def AssignedVariables(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Variables import Variables
            obj = Variables()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def WitnessStart(builder): builder.StartObject(1)
def WitnessAddAssignedVariables(builder, assignedVariables): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(assignedVariables), 0)
def WitnessEnd(builder): return builder.EndObject()
